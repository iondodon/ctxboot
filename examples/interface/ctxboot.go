// Code generated by ctxboot; DO NOT EDIT.

package main

import (
	"github.com/iondodon/ctxboot"
	"reflect"
	"log"
	"fmt"
	
)

// Context embeds ComponentContext and adds getter methods
type Context struct {
	*ctxboot.ComponentContext
}

// RegisterComponent registers a component instance and automatically deduces its type
func (cc *Context) RegisterComponent(instance interface{}) error {
	if instance == nil {
		return fmt.Errorf("cannot register nil component")
	}
	return cc.SetComponent(reflect.TypeOf(instance), instance)
}

// LoadContext registers and initializes all components and returns a Context
func LoadContext() (*Context, error) {
	cc := &Context{ctxboot.Boot()}
	
	// Register components in dependency order
	
	// Register EnglishGreeter
	if err := cc.SetComponent(reflect.TypeOf((*EnglishGreeter)(nil)), &EnglishGreeter{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "EnglishGreeter", err)
	}
	
	
	// Initialize all components after registration
	if err := cc.InitializeComponents(); err != nil {
		return nil, err
	}
	
	return cc, nil
}

// Component getter methods

// GetEnglishGreeter returns the EnglishGreeter component
func (cc *Context) GetEnglishGreeter() (*EnglishGreeter, error) {
	component, err := cc.GetComponent(reflect.TypeOf((*EnglishGreeter)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*EnglishGreeter), nil
}

