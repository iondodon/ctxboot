// Code generated by ctxboot; DO NOT EDIT.

package main

import (
	"github.com/iondodon/ctxboot"
	"reflect"
	"log"
	"fmt"
	
)

// ComponentContext embeds CtxbootComponentContext and adds getter methods
type ComponentContext struct {
	*ctxboot.CtxbootComponentContext
}

// RegisterComponent registers a component instance and automatically deduces its type
func (c *ComponentContext) RegisterComponent(instance interface{}) error {
	if instance == nil {
		return fmt.Errorf("cannot register nil component")
	}
	return c.SetComponent(reflect.TypeOf(instance), instance)
}

// InjectComponents initializes all registered components and their dependencies
func (c *ComponentContext) InjectComponents() error {
	return c.InitializeComponents()
}

// RegisterScanedComponenets registers all components
func (c *ComponentContext) RegisterScanedComponenets() error {
	// Register components in dependency order
	
	// Register LoggerConfig
	if err := c.SetComponent(reflect.TypeOf((*LoggerConfig)(nil)), &LoggerConfig{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "LoggerConfig", err)
	}
	
	// Register DatabaseConfig
	if err := c.SetComponent(reflect.TypeOf((*DatabaseConfig)(nil)), &DatabaseConfig{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "DatabaseConfig", err)
	}
	
	
	return nil
}

// NewComponentContext creates a new component context instance
func NewComponentContext() *ComponentContext {
	return &ComponentContext{ctxboot.NewCtxbootComponentContext()}
}

// Component getter methods

// GetLoggerConfig returns the LoggerConfig component
func (c *ComponentContext) GetLoggerConfig() (*LoggerConfig, error) {
	component, err := c.GetComponent(reflect.TypeOf((*LoggerConfig)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*LoggerConfig), nil
}

// GetDatabaseConfig returns the DatabaseConfig component
func (c *ComponentContext) GetDatabaseConfig() (*DatabaseConfig, error) {
	component, err := c.GetComponent(reflect.TypeOf((*DatabaseConfig)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*DatabaseConfig), nil
}

