// Code generated by ctxboot; DO NOT EDIT.

package main

import (
	"github.com/iondodon/ctxboot"
	"reflect"
	"log"
	"fmt"
	
)

// ComponentContext embeds CtxbootComponentContext and adds getter methods
type ComponentContext struct {
	*ctxboot.CtxbootComponentContext
}

// RegisterComponent registers a component instance and automatically deduces its type
func (c *ComponentContext) RegisterComponent(instance interface{}) error {
	if instance == nil {
		return fmt.Errorf("cannot register nil component")
	}
	return c.SetComponent(reflect.TypeOf(instance), instance)
}

// registerScanedComponenets registers all components
func (c *ComponentContext) registerScanedComponenets() error {
	// Register components in dependency order
	
	// Register UserService
	if err := c.SetComponent(reflect.TypeOf((*UserService)(nil)), &UserService{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "UserService", err)
	}
	
	
	return nil
}

// NewComponentContext creates a new component context instance and registers all scanned components
func NewComponentContext() *ComponentContext {
	ctx := &ComponentContext{ctxboot.NewCtxbootComponentContext()}
	if err := ctx.registerScanedComponenets(); err != nil {
		log.Fatalf("Failed to register scanned components: %v", err)
	}
	return ctx
}

// Component getter methods

// GetUserService returns the UserService component
func (c *ComponentContext) GetUserService() (*UserService, error) {
	component, err := c.GetComponent(reflect.TypeOf((*UserService)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*UserService), nil
}

