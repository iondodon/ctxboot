// Code generated by ctxboot; DO NOT EDIT.

package main

import (
	"github.com/iondodon/ctxboot"
	"reflect"
	"log"
	
	database "github.com/iondodon/ctxboot/examples/di/database"
	
	repository "github.com/iondodon/ctxboot/examples/di/repository"
	
)

// Context embeds ComponentContext and adds getter methods
type Context struct {
	*ctxboot.ComponentContext
}

// LoadContext registers and initializes all components and returns a Context
func LoadContext() (*Context, error) {
	cc := &Context{ctxboot.Boot()}
	
	// Register components in dependency order
	
	// Register database.DatabaseImpl
	if err := cc.SetComponent(reflect.TypeOf((*database.DatabaseImpl)(nil)), &database.DatabaseImpl{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "database.DatabaseImpl", err)
	}
	
	// Register UserService
	if err := cc.SetComponent(reflect.TypeOf((*UserService)(nil)), &UserService{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "UserService", err)
	}
	
	// Register repository.UserRepository
	if err := cc.SetComponent(reflect.TypeOf((*repository.UserRepository)(nil)), &repository.UserRepository{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "repository.UserRepository", err)
	}
	
	
	// Initialize all components after registration
	if err := cc.InitializeComponents(); err != nil {
		return nil, err
	}
	
	return cc, nil
}

// Component getter methods

// GetDatabaseImpl returns the DatabaseImpl component
func (cc *Context) GetDatabaseImpl() (*database.DatabaseImpl, error) {
	component, err := cc.GetComponent(reflect.TypeOf((*database.DatabaseImpl)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*database.DatabaseImpl), nil
}

// GetUserService returns the UserService component
func (cc *Context) GetUserService() (*UserService, error) {
	component, err := cc.GetComponent(reflect.TypeOf((*UserService)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*UserService), nil
}

// GetUserRepository returns the UserRepository component
func (cc *Context) GetUserRepository() (*repository.UserRepository, error) {
	component, err := cc.GetComponent(reflect.TypeOf((*repository.UserRepository)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*repository.UserRepository), nil
}

