// Code generated by ctxboot; DO NOT EDIT.

package main

import (
	"github.com/iondodon/ctxboot"
	"reflect"
	"log"
	
	database2 "github.com/iondodon/ctxboot/examples/di/database"
	
	repository "github.com/iondodon/ctxboot/examples/di/repository"
	
)

// LoadContext registers and initializes all components
func LoadContext(cc *ctxboot.ComponentContext) error {
	// Register components in dependency order
	
	// Register database2.DatabaseImpl
	if err := cc.SetComponent(reflect.TypeOf((*database2.DatabaseImpl)(nil)), &database2.DatabaseImpl{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "database2.DatabaseImpl", err)
	}
	
	// Register database2.PostgresDatabase
	if err := cc.SetComponent(reflect.TypeOf((*database2.PostgresDatabase)(nil)), &database2.PostgresDatabase{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "database2.PostgresDatabase", err)
	}
	
	// Register UserService
	if err := cc.SetComponent(reflect.TypeOf((*UserService)(nil)), &UserService{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "UserService", err)
	}
	
	// Register repository.UserRepository
	if err := cc.SetComponent(reflect.TypeOf((*repository.UserRepository)(nil)), &repository.UserRepository{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "repository.UserRepository", err)
	}
	
	
	// Initialize all components after registration
	return cc.InitializeComponents()
}
